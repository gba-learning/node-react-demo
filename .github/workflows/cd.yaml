name: CD

on: push
#  push:
#    branches:
#      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: staging
    outputs:
      ec2-instance-id: ${{ steps.terraform-output.outputs.ec2-instance-id }}
    permissions:
      id-token: write
      contents: read
    env:
      TF_VAR_backend_repository_name: ${{ vars.ECR_BACKEND_REPOSITORY_NAME }}
    steps:
      # TODO: Create OIDC provider + OIDC role in IaC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OIDC_AWS_ROLE_ARN }}
          aws-region: eu-west-1
      - name: Checkout
        uses: actions/checkout@v4
      # TODO: Consider using docker action so we have consistency between local and CI
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.2
      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure
      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ./infrastructure
      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: ./infrastructure
      - name: Terraform apply
        run: terraform apply -auto-approve -input=false
        working-directory: ./infrastructure
      - name: Terraform output
        id: terraform-output
        run: |
          echo "ec2-instance-id=$(terraform output -raw ec2_instance_id)" >> "$GITHUB_OUTPUT"
          cat $GITHUB_OUTPUT
        working-directory: ./infrastructure
  deploy-backend:
    runs-on: ubuntu-latest
    needs:
      - deploy-infrastructure
    steps:
#      - name: Install AWS cli
#        run: |
#          curl "https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m).zip" -o "awscliv2.zip"
#          unzip awscliv2.zip
#          sudo ./aws/install
      - name: Test show instance id
        run: echo "${{ needs.deploy-infrastructure.outputs.ec2-instance-id }}"
      - run:  aws ssm send-command --document-name "AWS-RunShellScript" --document-version "\$LATEST" --targets '[{"Key":"InstanceIds","Values":["${{ needs.deploy-infrastructure.outputs.ec2-instance-id }}"]}]' --parameters '{"commands":["eeecho \"Hello World from ssm run commanddddd\" > /tmp/res_from_github_actions.txt"]}' --timeout-seconds 600 --region eu-west-1
